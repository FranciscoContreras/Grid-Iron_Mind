use serde::{Deserialize, Serialize};

/// Player from roster CSV
#[derive(Debug, Deserialize, Serialize, Clone)]
pub struct RosterPlayer {
    pub season: i32,
    pub team: String,
    pub position: String,
    pub depth_chart_position: Option<String>,
    pub jersey_number: Option<i32>,
    pub status: Option<String>,
    pub full_name: String,
    pub first_name: Option<String>,
    pub last_name: Option<String>,
    pub birth_date: Option<String>,
    pub height: Option<String>,
    pub weight: Option<i32>,
    pub college: Option<String>,
    pub gsis_id: String,  // NFL player ID
    pub espn_id: Option<String>,
    pub sportradar_id: Option<String>,
    pub yahoo_id: Option<String>,
    pub rotowire_id: Option<String>,
    pub pff_id: Option<String>,
    pub pfr_id: Option<String>,
    pub fantasy_data_id: Option<String>,
    pub sleeper_id: Option<String>,
    pub years_exp: Option<i32>,
    pub headshot_url: Option<String>,
    pub entry_year: Option<i32>,
    pub rookie_year: Option<i32>,
    pub draft_club: Option<String>,
    pub draft_number: Option<i32>,
}

/// Player stat from player_stats CSV
#[derive(Debug, Deserialize, Serialize, Clone)]
pub struct PlayerStat {
    pub player_id: String,
    pub player_name: Option<String>,
    pub player_display_name: Option<String>,
    pub position: Option<String>,
    pub position_group: Option<String>,
    pub headshot_url: Option<String>,
    pub recent_team: Option<String>,
    pub season: i32,
    pub week: i32,
    pub season_type: String,
    pub completions: Option<f64>,
    pub attempts: Option<f64>,
    pub passing_yards: Option<f64>,
    pub passing_tds: Option<i32>,
    pub interceptions: Option<i32>,
    pub sacks: Option<f64>,
    pub sack_yards: Option<f64>,
    pub sack_fumbles: Option<i32>,
    pub sack_fumbles_lost: Option<i32>,
    pub passing_air_yards: Option<f64>,
    pub passing_yards_after_catch: Option<f64>,
    pub passing_first_downs: Option<i32>,
    pub passing_epa: Option<f64>,
    pub passing_2pt_conversions: Option<i32>,
    pub pacr: Option<f64>,
    pub dakota: Option<f64>,
    pub carries: Option<f64>,
    pub rushing_yards: Option<f64>,
    pub rushing_tds: Option<i32>,
    pub rushing_fumbles: Option<i32>,
    pub rushing_fumbles_lost: Option<i32>,
    pub rushing_first_downs: Option<i32>,
    pub rushing_epa: Option<f64>,
    pub rushing_2pt_conversions: Option<i32>,
    pub receptions: Option<f64>,
    pub targets: Option<f64>,
    pub receiving_yards: Option<f64>,
    pub receiving_tds: Option<i32>,
    pub receiving_fumbles: Option<i32>,
    pub receiving_fumbles_lost: Option<i32>,
    pub receiving_air_yards: Option<f64>,
    pub receiving_yards_after_catch: Option<f64>,
    pub receiving_first_downs: Option<i32>,
    pub receiving_epa: Option<f64>,
    pub receiving_2pt_conversions: Option<i32>,
    pub racr: Option<f64>,
    pub target_share: Option<f64>,
    pub air_yards_share: Option<f64>,
    pub wopr: Option<f64>,
    pub special_teams_tds: Option<i32>,
    pub fantasy_points: Option<f64>,
    pub fantasy_points_ppr: Option<f64>,
}

/// Game from schedule CSV
#[derive(Debug, Deserialize, Serialize, Clone)]
pub struct Game {
    pub game_id: String,
    pub season: i32,
    pub game_type: String,
    pub week: i32,
    pub gameday: String,
    pub weekday: Option<String>,
    pub gametime: Option<String>,
    pub away_team: String,
    pub away_score: Option<i32>,
    pub home_team: String,
    pub home_score: Option<i32>,
    pub location: Option<String>,
    pub result: Option<i32>,
    pub total: Option<i32>,
    pub overtime: Option<i32>,
    pub old_game_id: Option<String>,
    pub gsis: Option<String>,
    pub nfl_detail_id: Option<String>,
    pub pfr: Option<String>,
    pub pff: Option<String>,
    pub espn: Option<String>,
    pub ftn: Option<String>,
    pub away_rest: Option<i32>,
    pub home_rest: Option<i32>,
    pub away_moneyline: Option<f64>,
    pub home_moneyline: Option<f64>,
    pub spread_line: Option<f64>,
    pub away_spread_odds: Option<f64>,
    pub home_spread_odds: Option<f64>,
    pub total_line: Option<f64>,
    pub under_odds: Option<f64>,
    pub over_odds: Option<f64>,
    pub div_game: Option<i32>,
    pub roof: Option<String>,
    pub surface: Option<String>,
    pub temp: Option<f64>,
    pub wind: Option<f64>,
    pub away_qb_id: Option<String>,
    pub home_qb_id: Option<String>,
    pub away_qb_name: Option<String>,
    pub home_qb_name: Option<String>,
    pub away_coach: Option<String>,
    pub home_coach: Option<String>,
    pub referee: Option<String>,
    pub stadium_id: Option<String>,
    pub stadium: Option<String>,
}

/// Next Gen Stats (Passing)
#[derive(Debug, Deserialize, Serialize, Clone)]
pub struct NGSPassing {
    pub season: i32,
    pub season_type: String,
    pub week: Option<i32>,
    pub player_display_name: String,
    pub player_position: Option<String>,
    pub team_abbr: String,
    pub player_gsis_id: Option<String>,
    pub attempts: Option<i32>,
    pub pass_yards: Option<i32>,
    pub pass_touchdowns: Option<i32>,
    pub interceptions: Option<i32>,
    pub passer_rating: Option<f64>,
    pub completions: Option<i32>,
    pub completion_percentage: Option<f64>,
    pub expected_completion_percentage: Option<f64>,
    pub completion_percentage_above_expectation: Option<f64>,
    pub avg_time_to_throw: Option<f64>,
    pub avg_completed_air_yards: Option<f64>,
    pub avg_intended_air_yards: Option<f64>,
    pub avg_air_yards_differential: Option<f64>,
    pub aggressiveness: Option<f64>,
    pub max_completed_air_distance: Option<i32>,
    pub avg_air_yards_to_sticks: Option<f64>,
    pub passer_rating_under_pressure: Option<f64>,
}
